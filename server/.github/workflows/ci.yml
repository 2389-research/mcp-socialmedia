# ABOUTME: GitHub Actions CI/CD workflow for MCP Social Media API
# ABOUTME: Runs tests, linting, builds Docker image, and deploys on main branch

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 'latest'

      - name: Install dependencies
        run: uv sync

      - name: Run linting with ruff
        run: uv run ruff check src/ tests/

      - name: Run code formatting check with black
        run: uv run black --check src/ tests/

      - name: Run database migrations
        run: |
          export DATABASE_URL=sqlite:///test.db
          uv run alembic upgrade head

      - name: Run tests with pytest
        run: |
          export DATABASE_URL=sqlite:///test.db
          uv run pytest -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 'latest'

      - name: Run security scan with bandit
        run: |
          uv tool run bandit[toml] -r src/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  smoke-test:
    name: Docker Smoke Test
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create data directory
        run: mkdir -p data logs

      - name: Set up Docker Compose
        run: |
          export BUILD_SHA=${{ github.sha }}
          docker compose pull
          docker compose up -d

      - name: Wait for service to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/v1/healthz; do sleep 2; done'

      - name: Run smoke tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/v1/healthz | jq '.status' | grep -q "ok"

          # Test metrics endpoint
          curl -f http://localhost:8000/metrics | grep -q "http_request_duration_seconds"

          # Test OpenAPI docs
          curl -f http://localhost:8000/v1/docs > /dev/null

      - name: Check container logs
        if: failure()
        run: |
          docker compose logs api

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [smoke-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deployment step - configure your production deployment here"
          echo "Built image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your production deployment commands here
          # Examples:
          # - Deploy to Kubernetes
          # - Deploy to AWS ECS
          # - Deploy to DigitalOcean App Platform
          # - Deploy to Railway/Render/etc.
